Program([
	FuncDecl(fibonacci, IntegerType, [Param(n, IntegerType)], None, BlockStmt([VarDecl(f0, IntegerType, IntegerLit(0)), VarDecl(f1, IntegerType, IntegerLit(1)), VarDecl(fn, IntegerType, IntegerLit(1)), VarDecl(i, IntegerType), IfStmt(BinExpr(<, Id(n), IntegerLit(0)), BlockStmt([ReturnStmt(UnExpr(-, IntegerLit(1)))])), IfStmt(BinExpr(||, BinExpr(==, Id(n), IntegerLit(0)), BinExpr(==, Id(n), IntegerLit(1))), BlockStmt([ReturnStmt(Id(n))]), BlockStmt([ForStmt(AssignStmt(Id(i), IntegerLit(2)), BinExpr(<, Id(i), Id(n)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([AssignStmt(Id(f0), Id(f1)), AssignStmt(Id(f1), Id(fn)), AssignStmt(Id(fn), BinExpr(+, Id(f0), Id(f1)))]))])), ReturnStmt(Id(fn))]))
	FuncDecl(isPrimeNumber, IntegerType, [Param(n, IntegerType)], None, BlockStmt([IfStmt(BinExpr(<, Id(n), IntegerLit(2)), BlockStmt([ReturnStmt(IntegerLit(0))])), VarDecl(squareRoot, IntegerType, FuncCall(sqrt, [Id(n)])), ForStmt(AssignStmt(Id(i), IntegerLit(2)), BinExpr(<=, Id(i), Id(squareRoot)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([IfStmt(BinExpr(==, BinExpr(%, Id(n), Id(i)), IntegerLit(0)), BlockStmt([ReturnStmt(IntegerLit(0))]))])), ReturnStmt(IntegerLit(1))]))
	FuncDecl(simpleFunc, VoidType, [], None, BlockStmt([VarDecl(n, IntegerType), CallStmt(getInput, Id(n)), VarDecl(i, IntegerType, IntegerLit(0)), CallStmt(print, StringLit(All fiibinacci numbers < n and are prime number: )), WhileStmt(BinExpr(<, FuncCall(fibonacci, [Id(i)]), Id(n)), BlockStmt([VarDecl(fi, IntegerType, FuncCall(fibonacci, [Id(i)])), IfStmt(FuncCall(isPrimeNumber, [Id(fi)]), BlockStmt([CallStmt(print, BinExpr(+, Id(fi), StringLit( )))])), AssignStmt(Id(i), BinExpr(+, Id(i), IntegerLit(1)))]))]))
])